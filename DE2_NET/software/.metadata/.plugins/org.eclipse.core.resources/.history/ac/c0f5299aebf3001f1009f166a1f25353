/******************************************************************************
* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *
* All rights reserved. All use of this software and documentation is          *
* subject to the License Agreement located at the end of this file below.     *
*******************************************************************************                                                                             *
* Date - October 24, 2006                                                     *
* Module - iniche_init.c                                                      *
*                                                                             *                                                                             *
******************************************************************************/

/******************************************************************************
 * NicheStack TCP/IP stack initialization and Operating System Start in main()
 * for Simple Socket Server (SSS) example. 
 * 
 * This example demonstrates the use of MicroC/OS-II running on NIOS II.       
 * In addition it is to serve as a good starting point for designs using       
 * MicroC/OS-II and Altera NicheStack TCP/IP Stack - NIOS II Edition.                                                                                           
 *      
 * Please refer to the Altera NicheStack Tutorial documentation for details on 
 * this software example, as well as details on how to configure the NicheStack
 * TCP/IP networking stack and MicroC/OS-II Real-Time Operating System.  
 */
  
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <io.h>
#include <fcntl.h>
/* MicroC/OS-II definitions */
#include "../simple_socket_bsp/HAL/inc/includes.h"

#include "../simple_socket_bsp/system.h"

#include "dm9000a.h"

/* Simple Socket Server definitions */
#include "simple_socket_server.h"
#include "alt_error_handler.h"

/* Nichestack definitions */
#include "../simple_socket_bsp/iniche/src/h/nios2/ipport.h"
#include "../simple_socket_bsp/iniche/src/h/tcpport.h"
#include "../simple_socket_bsp/iniche/src/h/libport.h"
#include "../simple_socket_bsp/iniche/src/nios2/osport.h"
#include "basic_io.h"
#include "LCD.h"
#include "altera_avalon_pio_regs.h"
/* Definition of task stack for the initial task which will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example tasks. 
 */
OS_STK    SSSInitialTaskStk[TASK_STACKSIZE];

/* Declarations for creating a task with TK_NEWTASK.  
 * All tasks which use NicheStack (those that use sockets) must be created this way.
 * TK_OBJECT macro creates the static task object used by NicheStack during operation.
 * TK_ENTRY macro corresponds to the entry point, or defined function name, of the task.
 * inet_taskinfo is the structure used by TK_NEWTASK to create the task.
 */

#define IMAGE_MAX_SIZE 1024 * 1024  // Tamanho máximo da imagem (1MB)
#define PORT 7777
#define SERVER_IP "192.168.1.110"
#define BUFFER_SIZE 4096  // Buffer para recepção de dados

// Endereço base do componente VHDL na FPGA
#define FPGA_BASE_ADDR 0xFF200000
#define PIXEL_IN_REG 0x00          // Registrador para envio de pixels
#define ADDR_REG 0x04              // Registrador para selecionar nível de cinza do histograma
#define HISTOGRAM_OUT_REG 0x08     // Registrador para ler contagem do histograma

// Tamanho do histograma (256 níveis de cinza)
#define HISTOGRAM_SIZE 256

void *fpga_base;

TK_OBJECT(to_ssstask);
TK_ENTRY(SSSSimpleSocketServerTask);

struct inet_taskinfo ssstask = {
      &to_ssstask,
      "simple socket server",
      SSSSimpleSocketServerTask,
      4,
      APP_STACK_SIZE,
};

/* SSSInitialTask will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
 * RTOS structures and tasks. 
 */
void SSSInitialTask(void *task_data) {
	  INT8U error_code;

	  /*
	   * Initialize Altera NicheStack TCP/IP Stack - Nios II Edition specific code.
	   * NicheStack is initialized from a task, so that RTOS will have started, and
	   * I/O drivers are available.  Two tasks are created:
	   *    "Inet main"  task with priority 2
	   *    "clock tick" task with priority 3
	   */
	  alt_iniche_init();
	  netmain();

	  /* Wait for the network stack to be ready before proceeding.
	   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
	   */
	  while (!iniche_net_ready)
	    TK_SLEEP(1);

	  /* Now that the stack is running, perform the application initialization steps */

	  /* Application Specific Task Launching Code Block Begin */

	  printf("\nSimple Socket Server starting up\n");

	  /* Create the main simple socket server task. */
	  //TK_NEWTASK(&ssstask);

	  /*create os data structures */
	  //SSSCreateOSDataStructs();

	  /* create the other tasks */
	  //SSSCreateTasks();

	  /* Application Specific Task Launching Code Block End */

	  /*This task is deleted because there is no need for it to run again */
	  //error_code = OSTaskDel(OS_PRIO_SELF);
	  //alt_uCOSIIErrorHandler(error_code, 0);


    struct sockaddr_in sa;
    int SocketFD, res;
    unsigned char *image_data;
    int image_size, received;
    int histogram[HISTOGRAM_SIZE] = {0};

    printf("Iniciando o Cliente Socket\n");

    SocketFD = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (SocketFD < 0) {
        perror("Erro ao criar socket");
        exit(EXIT_FAILURE);
    }
    printf("Socket criado\n");

    memset(&sa, 0, sizeof(sa));
    sa.sin_family = AF_INET;
    sa.sin_port = htons(PORT);
    res = inet_pton(AF_INET, SERVER_IP, &sa.sin_addr);

    if (connect(SocketFD, (struct sockaddr *)&sa, sizeof(sa)) == -1) {
        perror("Erro ao conectar ao servidor");
        close(SocketFD);
        exit(EXIT_FAILURE);
    }
    printf("Conectado ao servidor!\n");

    while (1) {
        printf("\nAguardando nova imagem...\n");

        // Receber o tamanho da imagem
        if (recv(SocketFD, &image_size, sizeof(image_size), 0) <= 0) {
            perror("Erro ao receber o tamanho da imagem");
            break;
        }
        image_size = ntohl(image_size);
        printf("Tamanho da imagem recebido: %d bytes\n", image_size);

        // Alocar memória para armazenar a imagem
        image_data = (unsigned char *)malloc(image_size);
        if (!image_data) {
            perror("Falha ao alocar memória para a imagem");
            break;
        }

        // Receber a imagem em blocos
        received = 0;
        while (received < image_size) {
            int bytes = recv(SocketFD, image_data + received, BUFFER_SIZE, 0);
            if (bytes <= 0) {
                perror("Erro ao receber a imagem");
                free(image_data);
                break;
            }
            received += bytes;
        }
        printf("Imagem recebida com sucesso!\n");

        // Enviar os pixels da imagem para a FPGA
        send_image_to_fpga(image_data, image_size);

        // Ler o histograma gerado pela FPGA
        read_histogram_from_fpga(histogram);

        // Enviar o histograma de volta ao servidor
        send_histogram_to_server(SocketFD, histogram);

        // Liberar memória da imagem processada
        free(image_data);

        // Pausa antes de processar a próxima imagem
        printf("\nAguardando 5 segundos antes de processar a próxima imagem...\n");
        // sleep(5);
    }

    // Fechar a conexão apenas se houver erro ou finalização manual
    close(SocketFD);
    printf("Conexão encerrada.\n");
}

void send_image_to_fpga(unsigned char *image_data, int image_size) {
    printf("Enviando imagem para a FPGA...\n");

    int i = 0;
    while(i < image_size) {
        IOWR(FPGA_BASE_ADDR, PIXEL_IN_REG, image_data[i]);  // Enviar cada pixel para o registrador da FPGA
        i++;
    }

    printf("Todos os pixels foram enviados para a FPGA.\n");
}

void read_histogram_from_fpga(int *histogram) {
    printf("Lendo histograma gerado pela FPGA...\n");

    int i = 0;
    while (i < HISTOGRAM_SIZE) {
        IOWR(FPGA_BASE_ADDR, ADDR_REG, i);  // Selecionar o nível de cinza desejado
        histogram[i] = IORD(FPGA_BASE_ADDR, HISTOGRAM_OUT_REG);  // Ler o contador desse nível de cinza
        i++;
    }

    printf("Histograma lido com sucesso!\n");
}

void send_histogram_to_server(int socket, int *histogram) {
    printf("Enviando histograma para o servidor...\n");

    int histogram_network_order[HISTOGRAM_SIZE];

    int i = 0;
    // Converter para big-endian para compatibilidade entre diferentes arquiteturas
    while(i < HISTOGRAM_SIZE) {
        histogram_network_order[i] = htonl(histogram[i]);
        i++;
    }

    // Enviar o histograma para o servidor
    if (send(socket, histogram_network_order, sizeof(histogram_network_order), 0) == -1) {
        perror("Erro ao enviar histograma para o servidor");
    } else {
        printf("Histograma enviado com sucesso!\n");
    }
}

/* Main creates a single task, SSSInitialTask, and starts task scheduler.
 */

int main (int argc, char* argv[], char* envp[])
{
  
  INT8U error_code;

  DM9000A_INSTANCE( DM9000A_0, dm9000a_0 );
  DM9000A_INIT( DM9000A_0, dm9000a_0 );

  /* Clear the RTOS timer */
  OSTimeSet(0);

  /* SSSInitialTask will initialize the NicheStack
   * TCP/IP Stack and then initialize the rest of the Simple Socket Server example
   * RTOS structures and tasks.
   */
  error_code = OSTaskCreateExt(SSSInitialTask,
                             NULL,
                             (void *)&SSSInitialTaskStk[TASK_STACKSIZE],
                             SSS_INITIAL_TASK_PRIORITY,
                             SSS_INITIAL_TASK_PRIORITY,
                             SSSInitialTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);

  /*
   * As with all MicroC/OS-II designs, once the initial thread(s) and
   * associated RTOS resources are declared, we start the RTOS. That's it!
   */
  OSStart();
  
  while(1); /* Correct Program Flow never gets here. */

  return -1;
}

/******************************************************************************
*                                                                             *
* License Agreement                                                           *
*                                                                             *
* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *
* All rights reserved.                                                        *
*                                                                             *
* Permission is hereby granted, free of charge, to any person obtaining a     *
* copy of this software and associated documentation files (the "Software"),  *
* to deal in the Software without restriction, including without limitation   *
* the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
* and/or sell copies of the Software, and to permit persons to whom the       *
* Software is furnished to do so, subject to the following conditions:        *
*                                                                             *
* The above copyright notice and this permission notice shall be included in  *
* all copies or substantial portions of the Software.                         *
*                                                                             *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
* DEALINGS IN THE SOFTWARE.                                                   *
*                                                                             *
* This agreement shall be governed in all respects by the laws of the State   *
* of California and by the laws of the United States of America.              *
* Altera does not recommend, suggest or require that this reference design    *
* file be used in conjunction or combination with any other product.          *
******************************************************************************/
